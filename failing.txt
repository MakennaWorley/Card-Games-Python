    def test_ties_all_hand_types(self):
        test_cases = [
            # Straight Flush (Note: no royal flush)
            ("Straight Flush",
             ["KING", "QUEEN"], ["HEARTS", "HEARTS"],
             ["JACK", "TEN", "NINE", "EIGHT", "SEVEN"],
             ["HEARTS", "HEARTS", "HEARTS", "HEARTS", "HEARTS"]),
            ("Straight Flush",
             ["QUEEN", "JACK"], ["DIAMONDS", "DIAMONDS"],
             ["TEN", "NINE", "EIGHT", "SEVEN", "SIX"],
             ["DIAMONDS", "DIAMONDS", "DIAMONDS", "DIAMONDS", "DIAMONDS"]),
            ("Straight Flush",
             ["JACK", "TEN"], ["CLUBS", "CLUBS"],
             ["NINE", "EIGHT", "SEVEN", "SIX", "FIVE"],
             ["CLUBS", "CLUBS", "CLUBS", "CLUBS", "CLUBS"]),

            # Four of a Kind
            ("Four of a Kind",
             ["ACE", "ACE"], ["HEARTS", "DIAMONDS"],
             ["ACE", "ACE", "ACE", "KING", "QUEEN"],
             ["CLUBS", "SPADES", "HEARTS", "DIAMONDS", "SPADES"]),
            ("Four of a Kind",
             ["KING", "KING"], ["CLUBS", "DIAMONDS"],
             ["KING", "KING", "KING", "QUEEN", "JACK"],
             ["HEARTS", "SPADES", "DIAMONDS", "CLUBS", "SPADES"]),
            ("Four of a Kind",
             ["QUEEN", "QUEEN"], ["SPADES", "CLUBS"],
             ["QUEEN", "QUEEN", "QUEEN", "JACK", "TEN"],
             ["DIAMONDS", "HEARTS", "SPADES", "CLUBS", "DIAMONDS"]),

            # Full House
            ("Full House",
             ["KING", "KING"], ["HEARTS", "CLUBS"],
             ["KING", "KING", "QUEEN", "QUEEN", "JACK"],
             ["SPADES", "DIAMONDS", "HEARTS", "DIAMONDS", "CLUBS"]),
            ("Full House",
             ["QUEEN", "QUEEN"], ["DIAMONDS", "HEARTS"],
             ["QUEEN", "QUEEN", "JACK", "JACK", "TEN"],
             ["CLUBS", "SPADES", "HEARTS", "DIAMONDS", "SPADES"]),
            ("Full House",
             ["JACK", "JACK"], ["SPADES", "DIAMONDS"],
             ["JACK", "JACK", "TEN", "TEN", "NINE"],
             ["HEARTS", "CLUBS", "DIAMONDS", "HEARTS", "CLUBS"]),

            # Flush (ensure non-sequential to avoid straight flush)
            ("Flush",
             ["ACE", "QUEEN"], ["SPADES", "SPADES"],
             ["JACK", "NINE", "EIGHT", "FIVE", "TWO"],
             ["SPADES", "SPADES", "SPADES", "SPADES", "SPADES"]),
            ("Flush",
             ["KING", "JACK"], ["HEARTS", "HEARTS"],
             ["TEN", "EIGHT", "SEVEN", "FOUR", "TWO"],
             ["HEARTS", "HEARTS", "HEARTS", "HEARTS", "HEARTS"]),
            ("Flush",
             ["QUEEN", "TEN"], ["CLUBS", "CLUBS"],
             ["NINE", "EIGHT", "SIX", "THREE", "TWO"],
             ["CLUBS", "CLUBS", "CLUBS", "CLUBS", "CLUBS"]),

            # Straight (non-flush)
            ("Straight",
             ["KING", "QUEEN"], ["HEARTS", "DIAMONDS"],
             ["JACK", "TEN", "NINE", "TWO", "THREE"],
             ["SPADES", "SPADES", "HEARTS", "DIAMONDS", "CLUBS"]),
            ("Straight",
             ["QUEEN", "JACK"], ["CLUBS", "DIAMONDS"],
             ["TEN", "NINE", "EIGHT", "FOUR", "TWO"],
             ["HEARTS", "SPADES", "DIAMONDS", "CLUBS", "HEARTS"]),
            # Edge case: the "wheel" A-2-3-4-5 straight
            ("Straight",
             ["ACE", "TWO"], ["HEARTS", "DIAMONDS"],
             ["THREE", "FOUR", "FIVE", "NINE", "KING"],
             ["SPADES", "CLUBS", "DIAMONDS", "HEARTS", "SPADES"]),

            # Three of a Kind
            ("Three of a Kind",
             ["ACE", "ACE"], ["DIAMONDS", "HEARTS"],
             ["ACE", "KING", "QUEEN", "TEN", "NINE"],
             ["CLUBS", "SPADES", "DIAMONDS", "HEARTS", "CLUBS"]),
            ("Three of a Kind",
             ["KING", "KING"], ["CLUBS", "DIAMONDS"],
             ["KING", "QUEEN", "JACK", "TEN", "EIGHT"],
             ["HEARTS", "SPADES", "DIAMONDS", "CLUBS", "SPADES"]),
            ("Three of a Kind",
             ["QUEEN", "QUEEN"], ["SPADES", "CLUBS"],
             ["QUEEN", "JACK", "TEN", "NINE", "EIGHT"],
             ["DIAMONDS", "HEARTS", "SPADES", "CLUBS", "DIAMONDS"]),

            # Two Pair
            ("Two Pair",
             ["ACE", "KING"], ["HEARTS", "DIAMONDS"],
             ["ACE", "KING", "QUEEN", "JACK", "TEN"],
             ["CLUBS", "SPADES", "DIAMONDS", "HEARTS", "CLUBS"]),
            ("Two Pair",
             ["QUEEN", "JACK"], ["CLUBS", "SPADES"],
             ["QUEEN", "JACK", "TEN", "NINE", "EIGHT"],
             ["HEARTS", "DIAMONDS", "CLUBS", "SPADES", "HEARTS"]),
            ("Two Pair",
             ["TEN", "NINE"], ["DIAMONDS", "HEARTS"],
             ["TEN", "NINE", "EIGHT", "SEVEN", "SIX"],
             ["CLUBS", "SPADES", "DIAMONDS", "HEARTS", "CLUBS"]),

            # One Pair
            ("One Pair",
             ["ACE", "ACE"], ["SPADES", "HEARTS"],
             ["KING", "QUEEN", "JACK", "TEN", "NINE"],
             ["DIAMONDS", "CLUBS", "HEARTS", "SPADES", "DIAMONDS"]),
            ("One Pair",
             ["KING", "KING"], ["CLUBS", "DIAMONDS"],
             ["QUEEN", "JACK", "TEN", "NINE", "EIGHT"],
             ["HEARTS", "SPADES", "DIAMONDS", "CLUBS", "SPADES"]),
            ("One Pair",
             ["QUEEN", "QUEEN"], ["DIAMONDS", "CLUBS"],
             ["JACK", "TEN", "NINE", "EIGHT", "SEVEN"],
             ["SPADES", "HEARTS", "DIAMONDS", "CLUBS", "SPADES"]),

            # High Card
            ("High Card",
             ["ACE", "KING"], ["HEARTS", "DIAMONDS"],
             ["QUEEN", "JACK", "NINE", "FOUR", "TWO"],
             ["CLUBS", "SPADES", "DIAMONDS", "HEARTS", "CLUBS"]),
            ("High Card",
             ["QUEEN", "JACK"], ["CLUBS", "SPADES"],
             ["TEN", "EIGHT", "SEVEN", "THREE", "TWO"],
             ["DIAMONDS", "HEARTS", "SPADES", "CLUBS", "DIAMONDS"]),
            # Edge case: lowest possible high card (using low-value cards, ensuring no pair, flush, or straight)
            ("High Card",
             ["TWO", "THREE"], ["CLUBS", "DIAMONDS"],
             ["FOUR", "FIVE", "SEVEN", "NINE", "JACK"],
             ["HEARTS", "SPADES", "DIAMONDS", "CLUBS", "HEARTS"]),
        ]

        for i, (hand_type, p1_values, p1_suits, comm_values, comm_suits) in enumerate(test_cases):
            player1 = self.MockPlayer(self.create_cards(p1_values, p1_suits))
            community_cards = self.create_cards(comm_values, comm_suits)
            for hand_type2, p2_values, p2_suits, _, _ in test_cases[i + 1:]:
                player2 = self.MockPlayer(self.create_cards(p2_values, p2_suits))
                with self.subTest(hand1=hand_type, hand2=hand_type2):
                    winner = Evaluator.determine_winner([player1, player2], community_cards)
                    self.assertEqual(winner, player1, f"{hand_type} should beat {hand_type2}")